---------------- Water Connection Problem ------------------------------
Problem statement:-
        There are n houses and p water pipes in Geek Colony. Every house has at most one pipe going into it and at most one pipe going out of it. Geek needs to install pairs of tanks and taps in the colony according to the following guidelines.  
		1. Every house with one outgoing pipe but no incoming pipe gets a tank on its roof.
		2. Every house with only one incoming and no outgoing pipe gets a tap.
		The Geek council has proposed a network of pipes where connections are denoted by three input values: ai, bi, di denoting the pipe of diameter di from house ai to house bi.
		Find a more efficient way for the construction of this network of pipes. Minimize the diameter of pipes wherever possible.
		Note: The generated output will have the following format. The first line will contain t, denoting the total number of pairs of tanks and taps installed. The next t lines contain three integers each: house number of tank, house number of tap, and the minimum diameter of pipe between them.

Test Case :-
		Example 1:

		Input:
		n = 9, p = 6
		a[] = {7,5,4,2,9,3}
		b[] = {4,9,6,8,7,1}
		d[] = {98,72,10,22,17,66} 
		Output: 
		3
		2 8 22
		3 1 66
		5 6 10
		Explanation:
		Connected components are 
		3->1, 5->9->7->4->6 and 2->8.
		Therefore, our answer is 3 
		followed by 2 8 22, 3 1 66, 5 6 10.
		 


Idea:-
    1) we have to find out a relation like a house is connected with another
       house and then this another house is connected with again any another
       house and so on... like (2->3->7->5).
    2) Now if we somehow find that no one pointing '2' then the question 
       become simpler as if the data is stored in a map we can simply loop
       until the second house is present in any of the reaming first house.
    3) To find out that '2' is not pointed by anyone we can just insert all 
       values of second house in a set and find out wheter 2 is present or 
       not in that set.       


Code :-
    
    #include<bits/stdc++.h>
    #include<vector>
    using namespace std;


    int32_t main()
    {
        int n;
        cin>>n;
        set<int>s;
        map<int,pair<int,int>>m;
        for(int i=0;i<n;i++)
        {
            int first_house,second_house,diameter;
            cin>>first_house>>second_house>>diameter;
            s.insert(second_house);
            m[first_house] = {second_house,diameter};
        }
        vector<vector<int>>ans;
        
        for(auto &i : m)
        {
            if(s.find(i.first) == s.end())
            {
                vector<int>tmp;
                int mn = i.second.second;
                tmp.push_back(i.first);
                tmp.push_back(i.second.first);
                while(m.find(tmp[1])!=m.end())
                {
                    mn = min(mn,m[tmp[1]].second);
                    tmp[1]= m[tmp[1]].first;
                    
                }
                tmp.push_back(mn);
                ans.push_back(tmp);            
            }
        }
        cout<<ans.size()<<endl;
        for(auto &i : ans)
        {
            for(auto &j : i)
            {
                cout<<j<<" ";
            }
            cout<<endl;
        }
        cout<<endl;

        return 0;


    }


 Time Complexity :- O(n*log(n))
 Space Complexity :- O(n)

 IMPortant :-
    we can use vector<pair<int,int>> of size p(maximum element value) 
    instead of map and set.
    Time Complexity :- O(n+p)
    Space Complexity :- O(n+p)         
